## 01_프로세스의 개요

### 프로세스의 개념

---

- 프로그램
  - 저장장치에 저장 된 정적 상태
- 프로세스
  - 실행 중인 프로그램
  - 하나의 작업 단위
  - 실행을 위해 메모리에 올라온 동적 상태

### 요사 모형에의 비유

--- 

#### 일괄 작업 방식
- 한 번에 하나만 작업 처리
- 작업 효율이 떨어진다.

#### 시분할 방식
- 여러 개의 작업에선 일괄 작업 방식이 비효율적이다.
- 시간을 적당히 배분하여 CPU 1개가 여러 프로세스를 동시 처리
- 예상 치 못한 상황 처리
  - 작업을 마무리 하지 못한 상황에서 다른 작업을 처리하는 상황 발생

#### 프로그램 -> 프로세스 전환
- 프로세스가 될 때 프로그램은 메모리에 올라 온다.
  - 이 때, 작업 지시서인 *프로세스 제어 블럭* 이 만들어진다.
  - 프로세스를 처리하는데 필요한 다양한 정보가 들어 있다.
  - 프로그램이 프로세스가 되었다는 것은 프로세스 제어 블럭을 OS 로 부터 할당 받았다는 것을 의미한다.
- 프로세스 제어 블럭의 대표적인 3가지
  - 프로세스 구분자 : pid
  - 메모리 관련 정보
    - 실행하려는 프로세스의 메모리 저장 위치
    - 메모리 보호를 위한 경계, 한계 레지스터 포함
  - 각종 중간 값
    - 프로세스가 사용했던 중간 데이터
    - 프로세스가 작업을 이어 갈 때 활용
- 프로세스 제어 블럭은 OS 영역에 만들어진다.
- 프로세스 종료 시 제어 블럭은 폐기 된다.

#### 프로세스의 상태
- 생성 상태
  - 프로세스가 메모리에 올라온 상태
  - 프로세스 제어 블럭 생성, 같이 메모리로 옮겨짐
- 준비 상태
  - CPU 를 할당 받을 때까지 기다리는 상태
  - 준비 QUEUE 에서 대기
  - 실제로는 다수 준비 큐 운영
  - 큐를 운영하는 방식은 CPU 스케쥴러가 결정
- 실행 상태
  - CPU 를 할당 받아 실제 작업을 수행하는 상태
  - 프로세스는 CPU 사용 권리 획득
  - 할당 받은 시간 (타임 슬라이스) 동안 작업 미완료 시 준비 상태로 복귀
    - "타임 아웃"
  - 입출력 요청 시, block 함수를 실행, 대기 상태로 옮김
- 완료 상태
  - 프로세스가 작업을 마친 상태
  - 프로세스 제어 블럭 폐기를 의미
  - exit 함수 호출
  - 강제 종료 (abort) 시, 직전 메모리 상태를 저장장치로 이동 -> 코어 덤프

--- 
- CPU 는 프로세스를 실행 하는 동안 클럭에게 타임 슬라이스 알림을 요청한다.
- 타임 슬라이스 만료 시, 클럭은 인터럽트를 사용한다.

--- 
- 대기 상태
  - 프로세스가 IO 관련 작업 요청을 실행한 경우, 대기 상태로 바뀐다.
  - 작업의 효율성을 위함
  - 요청 완료 시, CPU 스케쥴러는 프로세스를 실행 상태로 만든다.
  - IO 장치 별 큐에서 대기
  - IO 요청 작업 완료 시, wake up 함수 호출 -> 인터럽트
- 휴식 상태
  - 프로세스가 작업을 일시적으로 쉬고 있는 상태
  - 프로세스 제어 블럭도 유지되므로, 멈춘 지점으로부터 재시작 가능
- 보류 상태
  - 프로세스가 메모리에서 잠시 쫓겨난 상태 (일시 정지 상태)
    - 메모리가 모자란 경우, 프로그램 오류, 부적절한 프로세스, 우선 순위가 낮은 프로세스, IO 요청 작업이 지연될 때
  - 스왑 영역에 보관 된다.

---

### 프로세스 제어 블럭

---
#### 프로세스 제어 블럭 구성
- 포인터 : 프로세스 제어블럭의 첫번째 블럭에 저장 (큐 구현할때 이용)

- 프로세스 상태 : 생성, 준비, 실행, 대기, 보류 준비, 보류 대기 등 (두 번째 블럭에 저장)

- 프로그램 구분자 : 운영체제 내에서 프로세스를 구별하기 위한 것

- 프로그램 카운터 : 다음에 실행 될 명령어의 위치 저장

- 프로세스 우선순위 : CPU 스케줄러가 준비상태에서 실행상태로 옮길 때 사용

- 각종 레지스터 정보 : 자신이 사용하던 레지스터의 중간 값

- 메모리 관리 정보

- 활당된 자원 정보 : 입출력 자원, 오픈 파일

- 계정 정보

- 부모 프로세서 구분자, 자식 프로세스 구분자

---
- 포인터의 역할
  - 같은 IO 를 기다리는 프로세스끼리 모아 놓는다.
  - 이 때, 포인터를 통해 이전, 다음 순서를 알 수 있다.

#### 문맥 교환
- 프로세스 간 작업 전환을 의미
- 프로세스 제어 블럭의 내용이 변경 된다.
- 인터럽트 시에도 발생한다.





